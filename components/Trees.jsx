/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 public/Tree.glb -o components/Tree.jsx -r public -k
*/

import React from "react";
import { createInstances, useGLTF } from "@react-three/drei";
import { createNoise2D } from "simplex-noise";
import { randFloat, randInt } from "three/src/math/MathUtils";
import TransformedInstance from "./TransformedInstance";

const [WoodInstances, Wood] = createInstances();
const [LeavesInstances, Leaves] = createInstances();

const noise2D = createNoise2D();

export default function Trees({ size, gridData, swarm }) {
  const { nodes, materials } = useGLTF("/models/Tree.glb");

  const instancesProps = {
    limit: size ** 2,
    castShadow: true,
    receiveShadow: true,
    frustumCulled: false,
  };

  return (
    <WoodInstances
      {...instancesProps}
      geometry={nodes.Tree_4_1.geometry}
      material={materials.Tree_Wood}
    >
      <LeavesInstances
        {...instancesProps}
        geometry={nodes.Tree_4_2.geometry}
        material={materials.Tree_Green}
      >
        {Array.from({ length: size }).map((_, i) => {
          return Array.from({ length: size }).map((_, j) => {
            const isTerrain = gridData[i][j].isTerrain;

            if (!isTerrain) return;
            if (Math.random() < 0.5) return;

            const x = i - size / 2;
            const z = j - size / 2;
            const y = size / 2 - x + (size / 2 - z) - size / 2;

            // let noise = (noise2D(i * 0.2, j * 0.2) + 1) * 0.5;
            // noise = Math.pow(noise, 3);

            const scaleX = randFloat(5, 13);
            const scaleY = randFloat(5, 13);
            const scaleZ = randFloat(5, 13);

            const position = [x, y - size / 2 + 1, z];

            // TODO: Random rotation

            return (
              <>
                {/* <Wood
                  position={position}
                  rotation={[-Math.PI / 2, 0, 0]}
                  scale={[scaleX, scaleY, scaleX]}
                />
                <Leaves
                  position={position}
                  rotation={[-Math.PI / 2, 0, 0]}
                  scale={[scaleX, scaleY, scaleZ]}
                /> */}
                <TransformedInstance
                  I={Wood}
                  position={position}
                  rotation={[-Math.PI / 2, 0, 0]}
                  scale={[scaleX, scaleY, scaleX]}
                  swarm={swarm}
                  size={size}
                />
                <TransformedInstance
                  I={Leaves}
                  position={position}
                  rotation={[-Math.PI / 2, 0, 0]}
                  scale={[scaleX, scaleY, scaleZ]}
                  swarm={swarm}
                  size={size}
                />
              </>
            );
          });
        })}
      </LeavesInstances>
    </WoodInstances>
  );
}

useGLTF.preload("/models/Tree.glb");
